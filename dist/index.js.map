{"version":3,"sources":["../src/cli/index.ts","../src/services/config.ts","../src/utils/symbols.ts","../src/cli/commands/copy.ts","../src/services/apiSkp.ts","../src/core/constants.ts","../src/services/auth/authManager.ts","../src/services/auth/authRetryInterceptor.ts","../src/services/auth/authTokenInjector.ts","../src/utils/runner.ts","../src/utils/delay.ts","../src/utils/output.ts","../src/cli/commands/debug.ts","../src/utils/jwt.ts","../src/utils/tmpDir.ts","../src/cli/commands/download.ts","../src/services/apiSkalioId.ts","../src/utils/stream.ts","../src/cli/commands/init.ts","../src/utils/input.ts","../src/utils/entities.ts","../src/utils/totp.ts","../src/cli/commands/upload.ts","../src/services/transferUpload.ts","../src/services/zip.ts"],"sourcesContent":["import {\n  Command,\n  InvalidArgumentError,\n  InvalidOptionArgumentError,\n} from \"@commander-js/extra-typings\";\nimport colors from \"ansi-colors\";\nimport { isAxiosError } from \"axios\";\nimport { config } from \"../services/config.js\";\nimport { coloredSymbols } from \"../utils/symbols.js\";\nimport { buildCopyCommand } from \"./commands/copy.js\";\nimport { addDebugCommands } from \"./commands/debug.js\";\nimport { buildDownloadCommand } from \"./commands/download.js\";\nimport { buildInitCommand } from \"./commands/init.js\";\nimport { buildUploadCommand } from \"./commands/upload.js\";\n\nconst program = new Command();\n\n// TODO discuss with Tom which version to use here and in package.json\nprogram.name(\"teambeam\").description(\"TeamBeam CLI\").version(\"1.0.0\");\n\nprogram.helpCommand(false);\n\nprogram.addCommand(buildInitCommand(config));\nprogram.addCommand(buildUploadCommand(config));\nprogram.addCommand(buildDownloadCommand(config));\nprogram.addCommand(buildCopyCommand(config));\n\naddDebugCommands(program);\n\nprogram.parseAsync().catch((err) => {\n  let errorPrefix: string;\n  let message: string;\n  let extraDetails: string[] = [];\n\n  if (err instanceof InvalidArgumentError) {\n    errorPrefix = \"Invalid argument\";\n    message = err.message;\n  } else if (err instanceof InvalidOptionArgumentError) {\n    errorPrefix = \"Invalid option\";\n    message = err.message;\n  } else if (isAxiosError(err)) {\n    errorPrefix = \"HTTP error\";\n    if (err.response?.data?.error) {\n      errorPrefix = \"API error\";\n      const {\n        code,\n        message: backendMessage,\n        details,\n      } = err.response.data.error;\n      message = `${backendMessage} (code ${code})`;\n      if (Array.isArray(details)) {\n        extraDetails = details;\n      }\n    } else if (err.response) {\n      message = `Received ${err.response.status} response from server.`;\n    } else if (err.request) {\n      message = \"No response received from server.\";\n    } else {\n      message = err.message;\n    }\n  } else {\n    errorPrefix = \"Unexpected error\";\n    message = err.message || String(err);\n  }\n\n  console.error(\n    colors.red.bold(`\\n${coloredSymbols.cross} ${errorPrefix}:`),\n    message\n  );\n\n  if (extraDetails.length > 0) {\n    for (const detail of extraDetails) {\n      console.error(colors.red(`  • ${detail}`));\n    }\n  }\n\n  process.exit(1);\n});\n","import Conf from \"conf\";\n\nexport interface ConfigSchema {\n  host: string;\n  email: string;\n  password: string;\n  idToken: string;\n  otp?: string;\n}\n\nexport class ConfigService {\n  private store = new Conf<ConfigSchema>({ projectName: \"teambeamjs\" });\n\n  get<K extends keyof ConfigSchema>(key: K): ConfigSchema[K] | undefined {\n    return this.store.get(key);\n  }\n\n  set(values: Partial<ConfigSchema>): void {\n    this.store.set(values);\n  }\n\n  clear(): void {\n    this.store.clear();\n  }\n\n  assertFullyConfigured(): void {\n    const missing = [\"host\", \"email\", \"idToken\"].filter(\n      (key) => !this.get(key as keyof ConfigSchema)\n    );\n    if (missing.length > 0) {\n      throw new Error(\"Incomplete config: please run 'teambeamjs init' first\");\n    }\n  }\n}\n\nexport const config = new ConfigService();\n","import colors from \"ansi-colors\";\n\nexport const symbols = {\n  tick: \"✔\",\n  info: \"ℹ\",\n  warning: \"⚠\",\n  cross: \"✘\",\n  squareSmall: \"◻\",\n  squareSmallFilled: \"◼\",\n  circle: \"◯\",\n  circleFilled: \"◉\",\n  circleDotted: \"◌\",\n  circleDouble: \"◎\",\n  circleCircle: \"ⓞ\",\n  circleCross: \"ⓧ\",\n  circlePipe: \"Ⓘ\",\n  radioOn: \"◉\",\n  radioOff: \"◯\",\n  checkboxOn: \"☒\",\n  checkboxOff: \"☐\",\n  checkboxCircleOn: \"ⓧ\",\n  checkboxCircleOff: \"Ⓘ\",\n  pointer: \"❯\",\n  triangleUpOutline: \"△\",\n  triangleLeft: \"◀\",\n  triangleRight: \"▶\",\n  triangleLeftOutlined: \"◁\",\n  triangleRightOutlined: \"▷\",\n  lozenge: \"◆\",\n  lozengeOutline: \"◇\",\n  hamburger: \"☰\",\n  smiley: \"㋡\",\n  mustache: \"෴\",\n  star: \"★\",\n  play: \"▶\",\n  nodejs: \"⬢\",\n  oneSeventh: \"⅐\",\n  oneNinth: \"⅑\",\n  oneTenth: \"⅒\",\n  fullHeightBar: \"│\",\n};\n\nexport const coloredSymbols = {\n  tick: colors.green(\"✔\"),\n  info: colors.yellow(\"▶\"),\n  warning: colors.red.bold(\"⚠\"),\n  cross: colors.red.bold(\"✘\"),\n  stepPrefix: \"┌\",\n  stepInfo: \"◇\",\n  stepGap: \"│\",\n  stepActive: colors.cyan(\"◇\"),\n  stepSuccess: colors.green(\"◆\"),\n  stepDone: colors.green(\"✔\"),\n  stepSuffix: \"└\",\n};\n","import { Command } from \"@commander-js/extra-typings\";\nimport colors from \"ansi-colors\";\nimport cliProgress from \"cli-progress\";\nimport { createSkpApi } from \"../../services/apiSkp.js\";\nimport { ConfigService } from \"../../services/config.js\";\nimport { runWithOptionalInterval } from \"../../utils/runner.js\";\nimport { coloredSymbols } from \"../../utils/symbols.js\";\n\nexport function buildCopyCommand(config: ConfigService): Command {\n  return new Command(\"copy\")\n    .description(\"Copy transfers from your inbox to an archive folder\")\n    .requiredOption(\n      \"-f, --folder <folderIdx>\",\n      \"Archive folder ID where to copy the transfer into\",\n      parseInt\n    )\n    .option(\n      \"-i, --interval <interval>\",\n      \"Run in loop, with delay of <interval> seconds between checks\",\n      parseInt\n    )\n    .action(async (options) => {\n      config.assertFullyConfigured();\n\n      const apiSkp = createSkpApi(config);\n\n      const { folder: folderIdx, interval } = options;\n\n      await runWithOptionalInterval(interval, async () => {\n        console.log(`${coloredSymbols.stepPrefix} Fetching transfers...`);\n        var transfers = await apiSkp.fetchTransfers({\n          location: \"received\",\n        });\n\n        transfers = transfers.filter((t) => t.isUnread);\n\n        if (transfers.length !== 0) {\n          console.log(\n            `${coloredSymbols.stepSuccess} Found ${transfers.length} transfer${transfers.length > 1 ? \"s\" : \"\"} to copy`\n          );\n          console.log(`${coloredSymbols.stepGap}`);\n          console.log(\n            `${coloredSymbols.stepGap} Copying into archive folder ${folderIdx}...`\n          );\n\n          const bar = new cliProgress.SingleBar(\n            {\n              clearOnComplete: false,\n              hideCursor: true,\n              format: `{prefix} [{bar}] {value}/{total} transfer${transfers.length > 1 ? \"s\" : \"\"}`,\n            },\n            cliProgress.Presets.shades_classic\n          );\n\n          bar.start(transfers.length, 0, {\n            prefix: coloredSymbols.stepActive,\n          });\n\n          for (const transfer of transfers) {\n            await apiSkp.copyTransferToArchive({\n              recipientId: transfer.recipientId,\n              folderIdx,\n            });\n            bar.increment();\n          }\n\n          bar.update(transfers.length, { prefix: coloredSymbols.stepSuccess });\n\n          bar.stop();\n          console.log(`${coloredSymbols.stepGap}`);\n          console.log(coloredSymbols.stepSuffix + colors.green(\" Done!\\n\"));\n        } else {\n          console.log(`${coloredSymbols.stepGap}`);\n          console.log(`${coloredSymbols.stepSuffix} No new transfers found\\n`);\n        }\n      });\n    });\n}\n","import axios from \"axios\";\nimport FormData from \"form-data\";\nimport { Readable } from \"stream\";\nimport { constants } from \"../core/constants.js\";\nimport {\n  AccessTokenResponse,\n  ReservationConfirmResult,\n  ReservationRequest,\n  ReservationResponse,\n  SkpEnvironment,\n  Transfer,\n  TransferFile,\n  TransferLocation,\n  UploadInfo,\n} from \"../entities/skp.js\";\nimport { AuthType, type AuthAwareAxiosInstance } from \"./auth/authAwareAxios.js\";\nimport { AuthManager } from \"./auth/authManager.js\";\nimport { createAuthRetryInterceptor } from \"./auth/authRetryInterceptor.js\";\nimport { createAuthTokenInjectorInterceptor } from \"./auth/authTokenInjector.js\";\nimport { TokenClient } from \"./auth/tokenClient.js\";\nimport { ConfigService } from \"./config.js\";\n\nexport function createSkpApi(\n  config: ConfigService,\n  overrideHost?: string\n): SkpApi {\n  return new SkpApi(\n    overrideHost ?? config.get(\"host\")!,\n    () => config.get(\"idToken\")!\n  );\n}\n\nexport type { SkpApi };\n\nclass SkpApi {\n  private readonly axios: AuthAwareAxiosInstance;\n\n  constructor(host: string, getIdToken: () => string | undefined) {\n    const baseURL = `${host}${constants.basePathSkp}`;\n\n    const tokenClient = new SkpTokenClient(baseURL);\n    const authManager = new AuthManager(getIdToken, tokenClient);\n\n    this.axios = axios.create({ baseURL }) as AuthAwareAxiosInstance;\n    this.axios.interceptors.request.use(\n      createAuthTokenInjectorInterceptor(authManager, getIdToken)\n    );\n    this.axios.interceptors.response.use(\n      undefined,\n      createAuthRetryInterceptor(authManager)\n    );\n  }\n\n  async fetchEnvironment(): Promise<SkpEnvironment> {\n    const response = await this.axios.get<SkpEnvironment>(\"/environment\", {\n      authType: AuthType.None,\n    });\n    return response.data;\n  }\n\n  async createReservation(\n    request: ReservationRequest\n  ): Promise<ReservationResponse> {\n    const response = await this.axios.post<ReservationResponse>(\n      \"/reservations\",\n      request,\n      { authType: AuthType.AccessToken }\n    );\n    return response.data;\n  }\n\n  async confirmReservation(\n    reservationId: string\n  ): Promise<ReservationConfirmResult> {\n    const response = await this.axios.post<ReservationConfirmResult>(\n      `/reservations/${reservationId}/confirm`,\n      undefined,\n      { authType: AuthType.AccessToken }\n    );\n    return response.data;\n  }\n\n  async uploadFileChunk({\n    startByte,\n    endByte,\n    formData,\n    totalBytes,\n    onUploadProgress,\n  }: {\n    startByte: number;\n    endByte?: number;\n    formData?: FormData;\n    totalBytes?: number;\n    onUploadProgress?: (progressEvent: any) => void;\n  }): Promise<UploadInfo> {\n    let contentRange;\n    if (\n      startByte !== undefined &&\n      endByte !== undefined &&\n      totalBytes !== undefined\n    ) {\n      contentRange = `bytes ${startByte}-${endByte - 1}/${totalBytes}`;\n    }\n    const response = await this.axios.postForm<UploadInfo>(\n      \"/upload\",\n      formData,\n      {\n        headers: contentRange ? { \"Content-Range\": contentRange } : undefined,\n        onUploadProgress,\n        authType: AuthType.AccessToken,\n      }\n    );\n    return response.data;\n  }\n\n  async fetchUploadedFileSize(\n    objectId: string,\n    reservationToken: string\n  ): Promise<number> {\n    const response = await this.axios.head(`/upload/${objectId}`, {\n      headers: {\n        \"X-Skp-Auth\": `${reservationToken}`,\n      },\n      authType: AuthType.AccessToken,\n    });\n    return Number(response.headers[\"content-length\"] ?? \"0\");\n  }\n\n  async fetchTransfers({\n    location,\n    search,\n  }: {\n    location?: TransferLocation;\n    search?: string;\n  }): Promise<Transfer[]> {\n    const response = await this.axios.get<ListResponse<Transfer, \"transfers\">>(\n      \"/transfers\",\n      {\n        params: { location, search },\n        authType: AuthType.AccessToken,\n      }\n    );\n    return response.data.transfers;\n  }\n\n  async fetchTransfer(recipientId: string): Promise<Transfer> {\n    const response = await this.axios.get<Transfer>(\n      `transfers/${recipientId}`,\n      { authType: AuthType.AccessToken }\n    );\n    return response.data;\n  }\n\n  async copyTransferToArchive({\n    recipientId,\n    folderIdx,\n  }: {\n    recipientId: string;\n    folderIdx: number;\n  }): Promise<Transfer> {\n    const response = await this.axios.post<Transfer>(\n      `transfers/${recipientId}/copy`,\n      { idx: folderIdx },\n      { authType: AuthType.AccessToken }\n    );\n    return response.data;\n  }\n\n  async streamTransferFile({\n    file,\n    onUploadProgress,\n  }: {\n    file: TransferFile;\n    onUploadProgress?: (progressEvent: any) => void;\n  }): Promise<Readable> {\n    const response = await this.axios.get<Readable>(file.url, {\n      responseType: \"stream\",\n      onDownloadProgress: onUploadProgress,\n      authType: AuthType.None,\n    });\n    return response.data;\n  }\n}\n\nclass SkpTokenClient implements TokenClient {\n  constructor(private readonly baseUrl: string) {}\n\n  async fetchAccessToken(idToken: string): Promise<string> {\n    const response = await axios.post<AccessTokenResponse>(\n      `${this.baseUrl}/auth/access`,\n      undefined,\n      {\n        headers: {\n          Authorization: `Bearer ${idToken}`,\n        },\n      }\n    );\n    return response.data.token;\n  }\n}\n\ntype ListResponse<T, K extends string> = {\n  total: number;\n} & {\n  [key in K]: T[];\n};\n","export const constants = {\n  initialChunkSize: 1000 * 1000 * 50, // 50MB\n  maxChunkSize: 500 * 1000 * 1000, // 500 MB\n  idealChunkUploadDuration: 60, // 60 seconds\n  maxUploadRetries: 10,\n  maxDelayBetweenRetriesSec: 20, // 20 seconds\n  tempDirName: \"teambeamjs\",\n  basePathSkalioId: \"/api/id/v3\",\n  basePathSkp: \"/api/skp/v1\",\n  defaultHost: \"https://free.teambeam.de\",\n} as const;\n","import { TokenClient } from \"./tokenClient.js\";\n\n/**\n * Manages the lifecycle of an access token.\n *\n * Reuses a cached token (held in-memory only, not persisted) unless expired.\n * On demand, fetches a new one using the provided ID token and a\n * {@link TokenClient}.\n *\n * The access token is not written to disk or persisted across CLI runs.\n */\nexport class AuthManager {\n  private accessToken: string | null = null;\n\n  constructor(\n    private readonly getIdToken: () => string | undefined,\n    private readonly tokenApiClient: TokenClient\n  ) {}\n\n  /**\n   * Returns an access token, fetching a new one if none is cached in-memory.\n   *\n   * @returns Anaccess token (either cached or freshly fetched)\n   */\n  async getAccessToken(): Promise<string> {\n    if (this.accessToken) {\n      return this.accessToken;\n    }\n\n    const idToken = this.getIdToken();\n    if (!idToken) throw new Error(\"No ID token available\");\n\n    const token = await this.tokenApiClient.fetchAccessToken(idToken);\n    this.accessToken = token;\n    return token;\n  }\n\n  /**\n   * Clears the cached access token, forcing the next call to fetch a new one.\n   */\n  clearAccessToken() {\n    this.accessToken = null;\n  }\n}\n","import axios, { AxiosError } from \"axios\";\nimport { AuthenticatedRequestConfig, AuthType } from \"./authAwareAxios.js\";\nimport { AuthManager } from \"./authManager.js\";\n\n/**\n * Axios response interceptor that retries requests with a fresh access token\n * after a 401 response. Only applies to requests with `authType: AccessToken`.\n *\n * Retries once, then falls back to the original error.\n */\nexport function createAuthRetryInterceptor(authManager: AuthManager) {\n  return async (error: AxiosError) => {\n    const config = error.config as AuthenticatedRequestConfig;\n\n    if (\n      error.response?.status === 401 &&\n      config.authType === AuthType.AccessToken &&\n      !config._isRetry\n    ) {\n      config._isRetry = true;\n      authManager.clearAccessToken();\n\n      try {\n        const newToken = await authManager.getAccessToken();\n        config.headers = {\n          ...config.headers,\n          Authorization: `Bearer ${newToken}`,\n        };\n\n        return axios(config);\n      } catch {\n        // Failed to retry, fall through to original error\n      }\n    }\n\n    return Promise.reject(error);\n  };\n}\n","import { AxiosRequestConfig, InternalAxiosRequestConfig } from \"axios\";\nimport { AuthenticatedRequestConfig, AuthType } from \"./authAwareAxios.js\";\nimport { AuthManager } from \"./authManager.js\";\n\n/**\n * Axios request interceptor that injects an Authorization header\n * based on the request's {@link AuthType}.\n *\n * Supports {@link AuthType.IdToken} and {@link AuthType.AccessToken}.\n * No-op for requests without an `authType`.\n */\nexport function createAuthTokenInjectorInterceptor(\n  authManager: AuthManager,\n  getIdToken: () => string | undefined\n) {\n  return async (config: AxiosRequestConfig) => {\n    const req = config as AuthenticatedRequestConfig;\n\n    switch (req.authType) {\n      case AuthType.IdToken: {\n        const idToken = getIdToken();\n        if (!idToken) throw new Error(\"No ID token available\");\n        req.headers = {\n          ...req.headers,\n          Authorization: `Bearer ${idToken}`,\n        };\n        break;\n      }\n      case AuthType.AccessToken: {\n        const accessToken = await authManager.getAccessToken();\n        req.headers = {\n          ...req.headers,\n          Authorization: `Bearer ${accessToken}`,\n        };\n        break;\n      }\n    }\n\n    return req as InternalAxiosRequestConfig;\n  };\n}\n","import ora from \"ora\";\nimport delay from \"./delay.js\";\nimport { logTime } from \"./output.js\";\n\n/**\n * Runs the given function either once or repeatedly based on the interval.\n * @param interval Interval in seconds. If undefined, runs only once.\n * @param fn The async function to execute.\n */\nexport async function runWithOptionalInterval(\n  interval: number | undefined,\n  fn: () => Promise<void>\n): Promise<void> {\n  const watch = interval !== undefined;\n\n  do {\n    if (watch) {\n      logTime();\n    }\n\n    await fn();\n\n    if (watch) {\n      const spinner = ora(`Next run in ${interval}s...`).start();\n      await delay(interval!);\n      spinner.stop();\n    }\n  } while (watch);\n}","export default async function delay(seconds: number): Promise<void> {\n  await new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n}\n","\n\nexport function logTime() {\n  const now = new Date();\n  const time = now.toLocaleTimeString(\"en-GB\", {\n    hour12: false,\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n  });\n  console.log(`[${time}]`);\n}\n","import { Command } from \"@commander-js/extra-typings\";\nimport colors from \"ansi-colors\";\nimport fs from \"fs-extra\";\nimport open from \"open\";\nimport ora from \"ora\";\nimport { config } from \"../../services/config.js\";\nimport { jwtDecode } from \"../../utils/jwt.js\";\nimport { coloredSymbols } from \"../../utils/symbols.js\";\nimport { getTmpDir } from \"../../utils/tmpDir.js\";\n\nexport function addDebugCommands(program: Command) {\n  const tmpDir = getTmpDir();\n\n  const tmpBase = new Command(\"tmpdir\").aliases([\"tmp\", \"tempdir\", \"temp\"]);\n\n  tmpBase\n    .command(\"open\")\n    .description(\"Open the directory for temporary files created by teambeamjs\")\n    .action(async () => {\n      open(tmpDir);\n    });\n\n  tmpBase\n    .command(\"clean\")\n    .description(\"Remove all leftover temporary files\")\n    .action(async () => {\n      console.log(coloredSymbols.stepPrefix);\n      console.log(\n        `${coloredSymbols.stepInfo} Clearing temporary files in ${tmpDir}`\n      );\n      console.log(coloredSymbols.stepGap);\n\n      if (!(await fs.pathExists(tmpDir))) {\n        console.log(\n          `${coloredSymbols.info} No temporary files found. Nothing to clean.`\n        );\n        console.log(coloredSymbols.stepSuffix);\n        return;\n      }\n\n      const files = await fs.readdir(tmpDir);\n\n      if (files.length === 0) {\n        console.log(\n          `${coloredSymbols.info} No temporary files found. Nothing to clean.`\n        );\n        console.log(coloredSymbols.stepSuffix);\n        return;\n      }\n\n      const spinner = ora(\n        `Found ${files.length} temporary file(s). Cleaning up...`\n      );\n      spinner.start();\n\n      for (const file of files) {\n        const fullPath = `${tmpDir}/${file}`;\n        await fs.remove(fullPath);\n      }\n\n      spinner.succeed(\n        `Successfully cleaned temporary directory by removing ${files.length} files.`\n      );\n\n      console.log(coloredSymbols.stepSuffix);\n    });\n\n  const l = Buffer.from(\"dGVhbWJlYW1qcw==\", \"base64\").toString();\n  const z = String.fromCharCode;\n  const bw = 26;\n  const t = z(9556) + \"═\".repeat(bw) + z(9559);\n  const s = z(9553);\n  const b = z(9562) + \"═\".repeat(bw) + z(9565);\n  const ll = (s: string) => \"         \" + s;\n  const p = \" \".repeat(bw);\n  const m = s + p + s;\n  const d = z(9617);\n  const dd = d + d;\n  const sp = \" \";\n  const pad5 = \" \".repeat(5);\n  const c = s + pad5 + dd + sp + l + sp + dd + pad5 + s;\n  const bx = [t, m, c, m, b].map(ll);\n\n  const cfns: Array<(text: string) => string> = [\n    colors.redBright,\n    colors.yellowBright,\n    colors.greenBright,\n    colors.cyanBright,\n    colors.blueBright,\n    colors.magentaBright,\n  ].map((c) => c.bold);\n\n  const cmd = String.fromCharCode(0x70, 0x61, 0x72, 0x74, 0x79);\n\n  const fun = new Command(cmd).action(() => {\n    let i = 0;\n    process.stdout.write(\"\\x1B[?25l\");\n    process.stdout.write(\"\\x1B[0;0H\\x1B[0J\");\n\n    const interval = setInterval(() => {\n      const colorFn = cfns[i % cfns.length];\n      process.stdout.write(\"\\x1B[0;0H\");\n      console.log(\"\\n\");\n      for (const line of bx) {\n        console.log(\"   \" + colorFn(line));\n      }\n      i++;\n    }, 100);\n\n    setTimeout(() => {\n      clearInterval(interval);\n      process.stdout.write(\"\\x1B[0;0H\\x1B[0J\");\n      process.stdout.write(\"\\x1B[?25h\");\n      process.exit(0);\n    }, 8000);\n  });\n\n  const configBase = new Command(\"config\")\n    .description(\"Inspect or open the config used by teambeamjs\")\n    .action(() => {\n      const store = config[\"store\"];\n      const path = store.path;\n\n      console.log(colors.cyanBright.bold(\"teambeamjs Config Overview\\n\"));\n\n      console.log(colors.gray(\"Config file location:\"));\n      console.log(`  ${path}\\n`);\n\n      const conf = store.store;\n      if (!conf || Object.keys(conf).length === 0) {\n        console.log(\n          coloredSymbols.warning +\n            colors.yellow(\" No config found or config is empty.\\n\")\n        );\n      } else {\n        console.log(colors.cyanBright(\"Current Config:\"));\n        console.log(JSON.stringify(conf, null, 2), \"\\n\");\n\n        if (conf.idToken) {\n          try {\n            const decoded = jwtDecode(conf.idToken);\n            console.log(colors.cyanBright(\"Decoded ID Token Claims:\"));\n            console.log(JSON.stringify(decoded, null, 2), \"\\n\");\n          } catch (e) {\n            console.log(colors.red(\"Failed to decode ID token.\"));\n          }\n        }\n      }\n\n      try {\n        config.assertFullyConfigured();\n        console.log(coloredSymbols.tick + colors.green(\" Config is valid.\"));\n      } catch (e) {\n        console.log(\n          coloredSymbols.warning +\n            colors.red(` Config is invalid: ${(e as Error).message}`)\n        );\n      }\n    });\n\n  configBase\n    .command(\"open\")\n    .description(\"Open the config file in the default editor\")\n    .action(() => {\n      const path = config[\"store\"].path;\n      if (path) {\n        open(path);\n      } else {\n        console.log(`${coloredSymbols.info} No config file found.`);\n      }\n    });\n\n  configBase\n    .command(\"clear\")\n    .aliases([\"clean\", \"delete\"])\n    .description(\"Remove all saved config values\")\n    .action(() => {\n      config.clear();\n      console.log(\n        coloredSymbols.tick + colors.green(\" Cleared all saved config values.\")\n      );\n    });\n\n  [tmpBase, fun, configBase].forEach((cmd) =>\n    program.addCommand(cmd, { hidden: true })\n  );\n}\n","import {\n  AccessToken,\n  AccessTokenSkalioId,\n  AccessTokenSkp,\n  IdToken,\n  MfaToken,\n  Token,\n} from \"../entities/skalioId.js\";\n\n/**\n * Decodes a JWT (header.payload.signature) and returns the payload as an object.\n */\nexport function jwtDecode(token: string): Object {\n  const parts = token.split(\".\");\n  if (parts.length !== 3) {\n    throw new Error(\"Invalid JWT format\");\n  }\n\n  // Payload is the second part\n  const payload = parts[1];\n\n  // Decode from base64\n  const jsonStr = atob(payload.replace(/-/g, \"+\").replace(/_/g, \"/\"));\n  return JSON.parse(jsonStr) as Object;\n}\n\nexport function determineToken(decodedJwt: Object): Token | undefined {\n  if (\"scope\" in decodedJwt !== true) return;\n  const token = decodedJwt as Token;\n  switch (token.scope) {\n    case \"uidtoken\":\n    case \"preflight\":\n    case \"park\":\n      return token;\n    case \"idtoken\":\n      return token as IdToken;\n    case \"mfa\":\n      return token as MfaToken;\n    case \"access\": {\n      const accessToken = token as AccessToken;\n      switch (accessToken.aud) {\n        case \"http://skalio.com/id\":\n          return accessToken as AccessTokenSkalioId;\n        case \"http://skalio.com/skp\":\n          return accessToken as AccessTokenSkp;\n        default:\n          return;\n      }\n    }\n    default:\n      const exhaustiveCheck: never = token.scope;\n      throw new Error(`Unhandled case over token scope switch: ${exhaustiveCheck}`);\n  }\n}\n","import * as os from \"os\";\nimport * as path from \"path\";\nimport { constants } from \"../core/constants.js\";\n\nexport function getTmpDir(): string {\n  return path.join(os.tmpdir(), constants.tempDirName);\n}\n","import { Command } from \"@commander-js/extra-typings\";\nimport colors from \"ansi-colors\";\nimport cliProgress from \"cli-progress\";\nimport downloadsFolder from \"downloads-folder\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { TransferLocation } from \"../../entities/skp.js\";\nimport { createSkalioIdApi } from \"../../services/apiSkalioId.js\";\nimport { createSkpApi } from \"../../services/apiSkp.js\";\nimport { ConfigService } from \"../../services/config.js\";\nimport { runWithOptionalInterval } from \"../../utils/runner.js\";\nimport { streamPromise } from \"../../utils/stream.js\";\nimport { coloredSymbols, symbols } from \"../../utils/symbols.js\";\n\nexport function buildDownloadCommand(config: ConfigService): Command {\n  return new Command(\"download\")\n    .description(\"Download transfers from your inbox\")\n    .option(\n      \"-d, --dir <directory>\",\n      \"Path to directory where transfers will be stored\"\n    )\n    .option(\n      \"-i, --interval <interval>\",\n      \"Run in loop, with delay of <interval> seconds between checks\",\n      parseInt\n    )\n    .option(\"-O, --include-old\", \"Download previously transfers as well\", false)\n    .option(\"-S, --include-sent\", \"Download sent transfers as well\", false)\n    .option(\n      \"-F, --use-filename\",\n      \"Store downloaded files using their actual filenames\",\n      false\n    )\n    .action(async (options) => {\n      config.assertFullyConfigured();\n\n      const apiSkp = createSkpApi(config);\n      const apiSkalioId = createSkalioIdApi(config);\n\n      const targetBaseDir = options.dir\n        ? path.resolve(options.dir)\n        : path.join(downloadsFolder(), \"transfers\");\n\n      const location: TransferLocation = options.includeSent\n        ? \"sentandreceived\"\n        : \"received\";\n\n      return await runWithOptionalInterval(options.interval, async () => {\n        console.log(`${symbols.triangleRightOutlined} Fetching emails...`);\n\n        const emails = await apiSkalioId.fetchAllEmails();\n        console.log(`Fetched ${emails.length} emails:`, emails[0]);\n\n        console.log(`${symbols.triangleRightOutlined} Fetching transfers...`);\n\n        var transfers = await apiSkp.fetchTransfers({ location: location });\n\n        if (!options.includeOld) {\n          transfers = transfers.filter((t) => t.isUnread);\n        }\n\n        if (transfers.length > 0) {\n          console.log(\n            `${symbols.triangleRight} ${transfers.length} transfer${transfers.length > 1 ? \"s\" : \"\"} found. Downloading...`\n          );\n          console.log();\n\n          for (const transfer of transfers) {\n            console.log(\n              `${coloredSymbols.stepPrefix} Transfer ${transfer.recipientId}`\n            );\n            console.log(coloredSymbols.stepGap);\n            const multibar = new cliProgress.MultiBar(\n              {\n                clearOnComplete: false,\n                hideCursor: true,\n                format:\n                  \"{prefix} File {filename} |\" +\n                  colors.cyan(\"{bar}\") +\n                  \"| {percentage}%\",\n              },\n              cliProgress.Presets.rect\n            );\n            const recipientFolder = path.join(\n              targetBaseDir,\n              transfer.recipientId\n            );\n            fs.mkdirSync(recipientFolder, { recursive: true });\n            for (const file of transfer.files) {\n              const fileName = options.useFilename ? file.name : file.objectId;\n              const filePath = path.join(recipientFolder, fileName);\n\n              const bar = multibar.create(file.size, 0, {\n                filename: fileName,\n                prefix: coloredSymbols.stepActive,\n              });\n\n              const fileStream = await apiSkp.streamTransferFile({\n                file,\n                onUploadProgress: ({ loaded }) => {\n                  bar.update(loaded, {\n                    prefix:\n                      loaded === file.size\n                        ? coloredSymbols.stepSuccess\n                        : coloredSymbols.stepActive,\n                  });\n                },\n              });\n              const writeStream = fs.createWriteStream(filePath);\n              const out = fileStream.pipe(writeStream);\n              await streamPromise(out);\n              bar.update(file.size);\n              bar.stop();\n            }\n            multibar.stop();\n\n            const updatedTransfer = await apiSkp.fetchTransfer(\n              transfer.recipientId\n            );\n            const jsonPath = path.join(recipientFolder, \"transfer.json\");\n            const jsonStream = fs.createWriteStream(jsonPath);\n            jsonStream.write(JSON.stringify(updatedTransfer, null, 2));\n            jsonStream.end();\n            console.log(coloredSymbols.stepGap);\n            console.log(\n              `${coloredSymbols.stepSuffix} ${colors.green(\"Done!\")}`\n            );\n            console.log();\n          }\n        } else {\n          console.log(`${symbols.triangleRight} No new transfers found`);\n        }\n\n        console.log();\n      });\n    });\n}\n","import axios from \"axios\";\nimport { constants } from \"../core/constants.js\";\nimport {\n  AuthRequest,\n  EmailAddress,\n  SkalioIdEnvironment,\n  TokenResponse,\n} from \"../entities/skalioId.js\";\nimport {\n  AuthType,\n  type AuthAwareAxiosInstance,\n} from \"./auth/authAwareAxios.js\";\nimport { AuthManager } from \"./auth/authManager.js\";\nimport { createAuthRetryInterceptor } from \"./auth/authRetryInterceptor.js\";\nimport { createAuthTokenInjectorInterceptor } from \"./auth/authTokenInjector.js\";\nimport type { TokenClient } from \"./auth/tokenClient.js\";\nimport { ConfigService } from \"./config.js\";\n\nexport function createSkalioIdApi(\n  config: ConfigService,\n  overrideHost?: string\n): SkalioIdApi {\n  return new SkalioIdApi(\n    overrideHost ?? config.get(\"host\")!,\n    () => config.get(\"idToken\")!\n  );\n}\n\nexport type { SkalioIdApi };\n\nclass SkalioIdApi {\n  private readonly axios: AuthAwareAxiosInstance;\n\n  constructor(host: string, getIdToken: () => string) {\n    const baseURL = `${host}${constants.basePathSkalioId}`;\n    const tokenClient = new SkalioIdTokenClient(baseURL, getIdToken);\n    const authManager = new AuthManager(getIdToken, tokenClient);\n\n    this.axios = axios.create({\n      baseURL,\n      headers: { \"Content-Type\": \"application/json\" },\n    }) as AuthAwareAxiosInstance;\n\n    this.axios.interceptors.request.use(\n      createAuthTokenInjectorInterceptor(authManager, getIdToken)\n    );\n    this.axios.interceptors.response.use(\n      undefined,\n      createAuthRetryInterceptor(authManager)\n    );\n  }\n\n  async fetchEnvironment(): Promise<SkalioIdEnvironment> {\n    const response = await this.axios.get<SkalioIdEnvironment>(\"/environment\", {\n      authType: AuthType.None,\n    });\n    return response.data;\n  }\n\n  async doesAccountExist(emailAddress: string): Promise<boolean> {\n    const response = await this.axios.post<{ provider: string }>(\n      \"/auth/exists\",\n      { address: emailAddress },\n      {\n        validateStatus: (status) =>\n          (status >= 200 && status < 300) || status === 404,\n        authType: AuthType.None,\n      }\n    );\n    return response.status === 200;\n  }\n\n  async login(input: Omit<AuthRequest, \"type\">): Promise<TokenResponse> {\n    const requestData: AuthRequest = {\n      ...input,\n      type: \"bcrypt\",\n    };\n    const response = await this.axios.post<TokenResponse>(\n      \"/auth/login\",\n      requestData,\n      { authType: AuthType.None }\n    );\n    return response.data;\n  }\n\n  async provideTotpCode(\n    input: Omit<AuthRequest, \"type\">,\n    mfaToken: string\n  ): Promise<TokenResponse> {\n    const requestData: AuthRequest = {\n      ...input,\n      type: \"totp\",\n    };\n    const response = await this.axios.post<TokenResponse>(\n      \"/auth/login\",\n      requestData,\n      {\n        headers: { Authorization: `Bearer ${mfaToken}` },\n        authType: AuthType.None,\n      }\n    );\n    return response.data;\n  }\n\n  async fetchAllEmails(): Promise<EmailAddress[]> {\n    const response = await this.axios.get<ListResponse<EmailAddress, \"emails\">>(\n      \"/profile/emails\",\n      {\n        authType: AuthType.AccessToken,\n      }\n    );\n    return response.data.emails;\n  }\n}\n\nclass SkalioIdTokenClient implements TokenClient {\n  constructor(\n    private readonly baseUrl: string,\n    private readonly getIdToken: () => string | undefined\n  ) {}\n\n  async fetchAccessToken(): Promise<string> {\n    const response = await axios.post<TokenResponse>(\n      `${this.baseUrl}/auth/access`,\n      undefined,\n      {\n        headers: {\n          Authorization: `Bearer ${this.getIdToken()}`,\n        },\n      }\n    );\n    return response.data.token;\n  }\n}\n\ntype ListResponse<T, K extends string> = {\n  [key in K]: T[];\n};\n","import { Writable } from \"stream\";\n\nexport function streamPromise(stream: Writable) : Promise<void> {\n  return new Promise((resolve, reject) => {\n    stream.on(\"end\", () => {\n      resolve();\n    });\n    stream.on(\"finish\", () => {\n      resolve();\n    });\n    stream.on(\"error\", (error) => {\n      reject(error);\n    });\n  });\n}\n","import { Command } from \"@commander-js/extra-typings\";\nimport colors from \"ansi-colors\";\nimport { z } from \"zod\";\nimport { constants } from \"../../core/constants.js\";\nimport { SkalioIdEnvironment } from \"../../entities/skalioId.js\";\nimport { createSkalioIdApi } from \"../../services/apiSkalioId.js\";\nimport { createSkpApi } from \"../../services/apiSkp.js\";\nimport { ConfigService } from \"../../services/config.js\";\nimport { getOrPromptInput, getOrPromptSecret } from \"../../utils/input.js\";\nimport { determineToken, jwtDecode } from \"../../utils/jwt.js\";\nimport { coloredSymbols } from \"../../utils/symbols.js\";\nimport { generateTotpCode } from \"../../utils/totp.js\";\n\nexport function buildInitCommand(config: ConfigService): Command {\n  return new Command(\"init\")\n    .description(\"Initialize configuration for teambeamjs\")\n    .option(\"-H, --host <host>\", \"API server hostname\")\n    .option(\"-e, --email <email>\", \"Email address\")\n    .option(\"-p --password <password>\", \"Password\")\n    .option(\"-o --otp <otp>\", \"OTP secret (Base32)\")\n    .action(async (options) => {\n      const previous = {\n        host: config.get(\"host\"),\n        email: config.get(\"email\"),\n        password: config.get(\"password\"),\n        otp: config.get(\"otp\"),\n      };\n\n      var environment: SkalioIdEnvironment;\n\n      const host = await getOrPromptInput({\n        key: \"host\",\n        message: \"API Host:\",\n        flagValue: options.host,\n        defaultValue: previous.host ?? constants.defaultHost,\n        validate: async (input) => {\n          if (z.string().url().safeParse(input).error)\n            return \"Must be a valid URL\";\n          if (\n            z\n              .string()\n              .url()\n              .refine((val) => {\n                try {\n                  const url = new URL(val);\n                  return (\n                    url.pathname === \"/\" &&\n                    url.search === \"\" &&\n                    url.hash === \"\" &&\n                    !val.endsWith(\"/\")\n                  );\n                } catch {\n                  return false;\n                }\n              })\n              .safeParse(input).error\n          )\n            return \"Must be a valid URL with no path and no trailing slash\";\n\n          const apiSkalioId = createSkalioIdApi(config, input);\n          const apiSkp = createSkpApi(config, input);\n          let environmentSkp;\n          try {\n            environmentSkp = await apiSkp.fetchEnvironment();\n            environment = await apiSkalioId.fetchEnvironment();\n            return true;\n          } catch (error) {\n            if (environmentSkp && environment === undefined) {\n              return `This version of teambeamjs is not compatible anymore with the provided TeamBeam server.\\nConsider downgrading to a previous version.`;\n            } else {\n              return `No TeamBeam server found at provided host. Error: '${error}'`;\n            }\n          }\n        },\n      });\n\n      config.set({ host });\n\n      const apiSkalioId = createSkalioIdApi(config);\n\n      const email = await getOrPromptInput({\n        key: \"email\",\n        message: \"Email:\",\n        flagValue: options.email,\n        defaultValue: previous.email,\n        validate: async (input) => {\n          if (!z.string().email().safeParse(input).success)\n            return \"Invalid email format\";\n          const exists = await apiSkalioId.doesAccountExist(input);\n          return exists || \"Email does not exist on server\";\n        },\n      });\n\n      let idToken: string | null = null;\n      let mfaToken: string | null = null;\n      let mfaRequired = false;\n\n      const password = await getOrPromptSecret({\n        key: \"password\",\n        message: \"Password:\",\n        flagValue: options.password,\n        defaultValue: previous.password,\n        validate: async (input) => {\n          if (!input) return \"Password is required\";\n          try {\n            const { token } = await apiSkalioId.login({ email, key: input });\n            const decodedJwt = jwtDecode(token);\n            const typedToken = determineToken(decodedJwt);\n\n            if (typedToken?.scope == \"idtoken\") {\n              mfaRequired = false;\n              mfaToken = null;\n              idToken = token;\n              return true;\n            } else if (typedToken?.scope == \"mfa\") {\n              mfaRequired = true;\n              mfaToken = token;\n              idToken = null;\n              return true;\n            } else {\n              return `Something went wrong: unexpected token response '${decodedJwt}'`;\n            }\n          } catch (error) {\n            return `Login with provided password failed: ${error}`;\n          }\n        },\n      });\n\n      if (options.otp && mfaToken === null) {\n        if (idToken === null) {\n          throw new Error(\n            \"StateError: should have obtained either ID- or MFA token by now\"\n          );\n        } else {\n          console.log(\n            coloredSymbols.info +\n              colors.yellow(\n                ` OTP secret '${options.otp}' provided but not needed for account '${email}', ignoring\\n`\n              )\n          );\n        }\n      }\n\n      let otp = options.otp ?? previous.otp ?? \"\";\n\n      if (mfaRequired) {\n        otp = await getOrPromptSecret({\n          key: \"otp\",\n          message: \"OTP Secret:\",\n          flagValue: options.otp,\n          defaultValue: previous.otp,\n          validate: async (val) => {\n            if (!val) return \"Please provide your TOTP secret\";\n            // to support skp-launchpad's output which contains decorative whitespaces\n            const sanitized = val.replace(/\\s+/g, \"\");\n            const code = generateTotpCode(sanitized);\n            try {\n              const { token } = await apiSkalioId.provideTotpCode(\n                { email, key: code },\n                mfaToken!\n              );\n              const decodedJwt = jwtDecode(token);\n              const typedToken = determineToken(decodedJwt);\n              if (typedToken?.scope != \"idtoken\")\n                return `Something went wrong: unexpected token response '${decodedJwt}'`;\n\n              idToken = token;\n              return true;\n            } catch (error) {\n              return `Login with provided TOTP code failed: ${error}`;\n            }\n          },\n        });\n        // to support skp-launchpad's output which contains decorative whitespaces\n        otp = otp.replace(/\\s+/g, \"\");\n      }\n\n      if (idToken === null)\n        throw new Error(\"StateError: should have obtained idToken by now\");\n      console.log(\n        `${coloredSymbols.stepDone} ${colors.green(\"Successfully logged in\")}`\n      );\n\n      config.set({ host, email, password, idToken, otp });\n      console.log(\n        `${coloredSymbols.stepDone} ${colors.green(\"Config has been saved\")} at ${colors.italic(config[\"store\"].path)}`\n      );\n    });\n}\n","import colors from \"ansi-colors\";\nimport inquirer from \"inquirer\";\nimport ora from \"ora\";\nimport { z } from \"zod\";\nimport { RecipientType, TransferReceiver } from \"../entities/skp.js\";\nimport { mapRecipients } from \"./entities.js\";\n\nexport async function getOrPromptInput({\n  key,\n  message,\n  flagValue,\n  defaultValue,\n  validate,\n}: {\n  key: string;\n  message: string;\n  flagValue?: string;\n  defaultValue?: string;\n  validate?: (value: string) => true | string | Promise<true | string>;\n}): Promise<string> {\n  if (flagValue !== undefined) {\n    if (validate) {\n      const result = await validate(flagValue);\n      if (result !== true) {\n        throw new Error(`Invalid value for --${key}: ${result}`);\n      }\n    }\n    return flagValue;\n  }\n\n  const { value } = await inquirer.prompt([\n    {\n      type: \"input\",\n      name: \"value\",\n      message,\n      default: defaultValue,\n      validate,\n    },\n  ]);\n\n  return value;\n}\n\nexport async function getOrPromptSecret({\n  key,\n  message,\n  flagValue,\n  defaultValue,\n  validate,\n}: {\n  key: string;\n  message: string;\n  flagValue?: string;\n  defaultValue?: string;\n  validate?: (value: string) => true | string | Promise<true | string>;\n}): Promise<string> {\n  if (flagValue !== undefined) {\n    if (validate) {\n      const result = await validate(flagValue);\n      if (result !== true) {\n        throw new Error(`Invalid value for --${key}: ${result}`);\n      }\n    }\n    return flagValue;\n  }\n\n  if (defaultValue) {\n    const { overwrite } = await inquirer.prompt([\n      {\n        type: \"confirm\",\n        name: \"overwrite\",\n        message: `Existing ${key} '${\"*\".repeat(defaultValue.length)}' found. Overwrite?`,\n        default: false,\n      },\n    ]);\n    if (!overwrite) {\n      if (validate) {\n        const spinner = ora(\n          `${message} ${colors.cyan(\"*\".repeat(defaultValue.length))}`\n        );\n        spinner.start();\n        const result = await validate(defaultValue);\n        if (result !== true) {\n          spinner.fail();\n          throw new Error(`Invalid value for --${key}: ${result}`);\n        } else {\n          spinner.succeed();\n        }\n      }\n      return defaultValue;\n    }\n  }\n\n  const { value } = await inquirer.prompt([\n    {\n      type: \"password\",\n      name: \"value\",\n      message,\n      default: defaultValue,\n      mask: true,\n      validate,\n    },\n  ]);\n\n  return value;\n}\n\nexport async function getOrPromptEditor({\n  key,\n  message,\n  flagValue,\n  defaultValue,\n  validate,\n}: {\n  key: string;\n  message: string;\n  flagValue?: string;\n  defaultValue?: string;\n  validate?: (value: string) => true | string | Promise<true | string>;\n}): Promise<string> {\n  if (flagValue !== undefined) {\n    if (validate) {\n      const result = await validate(flagValue);\n      if (result !== true) {\n        throw new Error(`Invalid value for --${key}: ${result}`);\n      }\n    }\n    return flagValue;\n  }\n\n  const { value } = await inquirer.prompt([\n    {\n      type: \"editor\",\n      name: \"value\",\n      message,\n      default: defaultValue,\n      waitForUseInput: true,\n      validate,\n    },\n  ]);\n\n  return value;\n}\n\nexport async function promptRecipients(): Promise<TransferReceiver[]> {\n  const recipients: TransferReceiver[] = [];\n  while (recipients.length == 0) {\n    for (const type of [\"to\", \"cc\", \"bcc\"] as RecipientType[]) {\n      const emails = await promptRecipientsOfType(type);\n      recipients.push(...mapRecipients(type, emails));\n    }\n    if (recipients.length == 0)\n      console.error(\"Please provide at least one recipient\");\n  }\n  return recipients;\n}\n\nasync function promptRecipientsOfType(type: RecipientType): Promise<string[]> {\n  const { addRecipients } = await inquirer.prompt([\n    {\n      type: \"confirm\",\n      name: \"addRecipients\",\n      message: `$Add recipients of tyoe '${type}'?`,\n      default: false,\n    },\n  ]);\n\n  if (!addRecipients) {\n    return [];\n  }\n\n  let recipients: string[] = [];\n  while (true) {\n    const { email } = await inquirer.prompt([\n      {\n        type: \"input\",\n        name: \"email\",\n        message: `Add recipient (${type}):`,\n        validate: (input) => {\n          if (input.length == 0) return \"Please enter an email address\";\n          if (z.string().email().safeParse(input).error)\n            return \"Please enter a valid email address\";\n          return true;\n        },\n      },\n    ]);\n    recipients.push(email);\n\n    const { addMore } = await inquirer.prompt([\n      {\n        type: \"confirm\",\n        name: \"addMore\",\n        message: `Transfer has ${recipients.length} recipient${recipients.length === 1 ? \"\" : \"s\"} of type '${type}'. Add more?`,\n        default: false,\n      },\n    ]);\n    if (!addMore) {\n      console.log(\n        `Added ${recipients.length} '${type}' recipients:`,\n        recipients.reduce((prev, curr) => prev + \", \" + curr),\n        \"\"\n      );\n      return recipients;\n    }\n  }\n}\n\nexport async function getOrPromptTtl({\n  flagValue,\n  defaultValue,\n  values,\n}: {\n  flagValue?: number;\n  defaultValue: number;\n  values: number[];\n}): Promise<number> {\n  if (flagValue !== undefined) {\n    const schema = z.union([\n      z.number().refine((num) => values.includes(num), {\n        message: `TTL value must be one of the allowed TTL values: ${values.join(\", \")}.`,\n      }),\n      z.undefined(),\n    ]);\n    const result = schema.safeParse(flagValue);\n    if (result.error) {\n      throw Error(result.error.issues[0].message);\n    } else {\n      return flagValue;\n    }\n  } else {\n    const input = (\n      await inquirer.prompt([\n        {\n          type: \"list\",\n          name: \"ttl\",\n          message: `TTL:`,\n          choices: values\n            .slice()\n            .sort((a, b) => a - b)\n            .map((ttl) => ({\n              name: `${ttl} day${ttl > 1 ? \"s\" : \"\"}`,\n              value: ttl,\n            })),\n          default: values.indexOf(defaultValue),\n        },\n      ])\n    ).ttl;\n    return input;\n  }\n}\n","import { TransferReceiver } from \"../entities/skp.js\";\n\nexport const mapRecipients = (type: \"to\" | \"cc\" | \"bcc\", list?: string[]) =>\n    list?.map<TransferReceiver>((email) => ({ email, type })) || [];","import { authenticator } from 'otplib';\n\nexport function generateTotpCode(secret: string): string {\n  return authenticator.generate(secret);\n}","import {\n  Command,\n  InvalidArgumentError,\n  InvalidOptionArgumentError,\n} from \"@commander-js/extra-typings\";\nimport colors from \"ansi-colors\";\nimport cliProgress from \"cli-progress\";\nimport fs from \"fs-extra\";\nimport ora, { oraPromise } from \"ora\";\nimport path from \"path\";\nimport { z } from \"zod\";\nimport {\n  ReservationRequest,\n  ReservationRequestFile,\n  TransferProtection,\n  TransferReceiver,\n} from \"../../entities/skp.js\";\nimport { createSkpApi } from \"../../services/apiSkp.js\";\nimport { ConfigService } from \"../../services/config.js\";\nimport { TransferUploadService } from \"../../services/transferUpload.js\";\nimport { ZipService } from \"../../services/zip.js\";\nimport { mapRecipients } from \"../../utils/entities.js\";\nimport {\n  getOrPromptEditor,\n  getOrPromptInput,\n  getOrPromptSecret,\n  getOrPromptTtl,\n  promptRecipients,\n} from \"../../utils/input.js\";\nimport { coloredSymbols, symbols } from \"../../utils/symbols.js\";\n\nexport function buildUploadCommand(config: ConfigService): Command<[string[]]> {\n  return new Command(\"upload\")\n    .description(\"Send a transfer\")\n    .option(\"-T, --to <emails...>\", \"Recipients\")\n    .option(\"-C, --cc <emails...>\", \"Recipients in copy\")\n    .option(\"-B, --bcc <emails...>\", \"Recipients in blind copy\")\n    .option(\"-s, --subject <subject>\", \"Transfer subject\")\n    .option(\"-m, --message <message>\", \"Transfer message\")\n    .option(\"-t, --ttl <ttl>\", \"Time to live in days\", parseInt)\n    .option(\"-P, --password [password]\", \"Transfer password\")\n    .argument(\"<files...>\", \"Files of the transfer\")\n    .action(async (args, options) => {\n      config.assertFullyConfigured();\n      \n      const apiSkp = createSkpApi(config);\n      const zipService = new ZipService();\n      const uploadService = new TransferUploadService(apiSkp);\n\n      const { localFiles, temporaryFiles, reservationFiles } =\n        await prepareFiles(args, zipService);\n\n      const cleanup = async () => {\n        for (const tempFile of temporaryFiles) {\n          await fs.remove(tempFile);\n        }\n      };\n\n      process.on(\"SIGINT\", async () => {\n        await cleanup();\n        process.exit(1);\n      });\n\n      try {\n        const recipients = [\n          ...prepareFlagRecipients({\n            to: options.to,\n            cc: options.cc,\n            bcc: options.bcc,\n          }),\n        ];\n\n        if (recipients.length == 0) {\n          const recipientsInput = await promptRecipients();\n          recipients.push(...recipientsInput);\n        }\n\n        const subject = await getOrPromptInput({\n          key: \"subject\",\n          message: \"Subject:\",\n          flagValue: options.subject,\n        });\n\n        const message = await getOrPromptEditor({\n          key: \"message\",\n          message: \"Message:\",\n          flagValue: options.message,\n        });\n\n        const { default: ttlDefault, values: ttlValues } = (\n          await apiSkp.fetchEnvironment()\n        ).expiration;\n\n        const ttl = await getOrPromptTtl({\n          flagValue: options.ttl,\n          defaultValue: ttlDefault,\n          values: ttlValues,\n        });\n\n        const transferPassword: string | undefined =\n          options.password === undefined\n            ? undefined\n            : options.password === true\n              ? await getOrPromptSecret({\n                  key: \"password\",\n                  message: \"Transfer password: \",\n                  validate: (input) => {\n                    if (input.length <= 0)\n                      return \"Please provide a transfer password\";\n                    return true;\n                  },\n                })\n              : options.password;\n\n        const protection: TransferProtection | undefined = transferPassword\n          ? { enabled: true, key: transferPassword }\n          : undefined;\n\n        const reservationRequest: ReservationRequest = {\n          receivers: recipients,\n          subject: subject,\n          description: message,\n          protection: protection,\n          ttl: ttl,\n          files: reservationFiles,\n        };\n\n        const progressBar = new cliProgress.SingleBar(\n          {\n            format:\n              \"{prefix} Transfer upload |\" +\n              colors.cyan(\"{bar}\") +\n              \"| {percentage}%\",\n          },\n          cliProgress.Presets.rect\n        );\n        const spinnerCreate = ora({\n          text: \"Creating reservation...\",\n          isEnabled: false,\n          isSilent: true,\n        });\n        const spinnerConfirm = ora({\n          text: \"Confirming reservation...\",\n          isEnabled: false,\n          isSilent: true,\n        });\n\n        spinnerCreate.start();\n\n        const result = await uploadService.uploadTransfer({\n          filePaths: localFiles,\n          reservationRequest: reservationRequest,\n          onProgress: (progress) => {\n            progressBar.update(progress, {\n              prefix:\n                progress === 100 ? coloredSymbols.tick : symbols.triangleRight,\n            });\n          },\n          onReservationCreated: () => {\n            spinnerCreate.succeed(\"Created reservation\");\n            progressBar.start(100, 0, { prefix: symbols.triangleRight });\n          },\n          onReservationConfirm: () => {\n            progressBar.stop();\n            spinnerConfirm.start();\n          },\n        });\n\n        spinnerConfirm!.succeed(\"Confirmed reservation\");\n\n        console.log(\n          `${coloredSymbols.tick} ${colors.green.bold(\"Successfully uploaded transfer\")}`\n        );\n        console.log(\n          `  ${colors.italic(`${config.get(\"host\")}/transfer/get/${result.result[0].recipientId}`)}`\n        );\n      } finally {\n        await cleanup();\n      }\n    });\n}\nasync function prepareFiles(\n  filePaths: string[],\n  zipService: ZipService\n): Promise<{\n  localFiles: string[];\n  temporaryFiles: string[];\n  reservationFiles: ReservationRequestFile[];\n}> {\n  const localFiles: string[] = [];\n  const temporaryFiles: string[] = [];\n  const reservationFiles: ReservationRequestFile[] = [];\n\n  for (var [i, filePath] of filePaths.entries()) {\n    if (!fs.existsSync(filePath)) {\n      throw new InvalidArgumentError(\n        `Provided file does not exist: '${filePath}'`\n      );\n    }\n    let stat = fs.statSync(filePath);\n    if (stat.isDirectory()) {\n      const zipPath = await oraPromise(zipService.zipDirectory(filePath), {\n        text: `Creating zip file for '${filePath}'...`,\n        successText: `Created zip file for '${filePath}'`,\n      });\n      let zipStat = fs.statSync(zipPath);\n      localFiles.push(zipPath);\n      temporaryFiles.push(zipPath);\n      reservationFiles.push({\n        name: path.basename(zipPath),\n        size: zipStat.size,\n        id: `${i}`,\n      });\n      continue;\n    } else if (stat.isFile()) {\n      localFiles.push(filePath);\n      reservationFiles.push({\n        name: path.basename(filePath),\n        size: stat.size,\n        id: `${i}`,\n      });\n      continue;\n    } else {\n      throw new InvalidArgumentError(\n        `Unsupported file type found for  '${filePath}'`\n      );\n    }\n  }\n\n  return { localFiles, temporaryFiles, reservationFiles };\n}\n\nfunction prepareFlagRecipients({\n  to,\n  cc,\n  bcc,\n}: {\n  to?: string[];\n  cc?: string[];\n  bcc?: string[];\n}): TransferReceiver[] {\n  const flagRecipients: TransferReceiver[] = [\n    ...mapRecipients(\"to\", to),\n    ...mapRecipients(\"cc\", cc),\n    ...mapRecipients(\"bcc\", bcc),\n  ];\n\n  if (flagRecipients.some((r) => z.string().email().safeParse(r.email).error)) {\n    throw new InvalidOptionArgumentError(\n      \"Please provide valid email addresses\"\n    );\n  }\n\n  return flagRecipients;\n}\n","import axios from \"axios\";\nimport FormData from \"form-data\";\nimport fs from \"fs\";\nimport { constants } from \"../core/constants.js\";\nimport {\n  ReservationConfirmResult,\n  ReservationRequest,\n  ReservationResponse,\n  ReservationResponseFile,\n  UploadInfo,\n} from \"../entities/skp.js\";\nimport delay from \"../utils/delay.js\";\nimport { SkpApi } from \"./apiSkp.js\";\n\nexport class TransferUploadService {\n  private skpApi: SkpApi;\n\n  constructor(skpApi: SkpApi) {\n    this.skpApi = skpApi;\n  }\n\n  public async uploadTransfer({\n    filePaths,\n    reservationRequest,\n    onProgress,\n    onReservationCreated,\n    onReservationConfirm,\n  }: {\n    filePaths: string[];\n    reservationRequest: ReservationRequest;\n    onProgress: (progress: number) => void;\n    onReservationCreated: () => void;\n    onReservationConfirm: () => void;\n  }): Promise<ReservationConfirmResult> {\n    const totalFilesSize = reservationRequest.files.reduce(\n      (acc, file) => acc + file.size,\n      0\n    );\n\n    onProgress(0);\n    let completedUploadSize = 0;\n    let currentUploadSize = 0;\n\n    const pushProgress = (uploadedBytes: number, startByte: number) => {\n      currentUploadSize = completedUploadSize + startByte + uploadedBytes;\n      let uploadProgress: number = Math.floor(\n        (currentUploadSize / totalFilesSize) * 100\n      );\n      onProgress(Math.min(uploadProgress, 100));\n    };\n\n    const reservation: ReservationResponse =\n      await this.skpApi.createReservation(reservationRequest);\n    onReservationCreated();\n\n    const uploadDataList: UploadData[] = filePaths.map((filePath, i) => ({\n      reservedFile: reservation.files.find((f) => f.id === `${i}`)!,\n      filePath,\n      startByte: 0,\n    }));\n\n    for (const uploadData of uploadDataList) {\n      await this.initiateUpload({\n        currentChunkSize: constants.initialChunkSize,\n        uploadData,\n        reservationToken: reservation.token,\n        shouldCheckUploadedFileSize: false,\n        retryCount: 0,\n        pushProgress,\n      });\n      completedUploadSize += uploadData.reservedFile.size;\n    }\n\n    onReservationConfirm();\n    const result = await this.skpApi.confirmReservation(reservation.token);\n    await delay(2);\n    return result;\n  }\n\n  private async initiateUpload(props: InitiateUploadProp): Promise<void> {\n    if (props.shouldCheckUploadedFileSize) {\n      try {\n        props.uploadData.startByte = await this.skpApi.fetchUploadedFileSize(\n          props.uploadData.reservedFile.objectId,\n          props.reservationToken\n        );\n      } catch (error) {\n        if (props.retryCount >= constants.maxUploadRetries) throw error;\n        if (axios.isAxiosError(error) && error.response?.status === 404) {\n          props.uploadData.startByte = 0;\n        } else {\n          return await this.retryUpload(props);\n        }\n      }\n    }\n\n    props.uploadData.endByte = Math.min(\n      props.uploadData.startByte + props.currentChunkSize,\n      props.uploadData.reservedFile.size\n    );\n\n    props.uploadData.formData = await this.createUploadFormData(\n      props.uploadData,\n      props.reservationToken\n    );\n\n    try {\n      const chunkUploadStartTime = Date.now();\n      const response: UploadInfo = await this.skpApi.uploadFileChunk({\n        startByte: props.uploadData.startByte,\n        endByte: props.uploadData.endByte,\n        formData: props.uploadData.formData,\n        totalBytes: props.uploadData.reservedFile.size,\n        onUploadProgress: (event) =>\n          props.pushProgress(event.loaded, props.uploadData.startByte),\n      });\n\n      props.retryCount = 0;\n      const duration = Math.floor((Date.now() - chunkUploadStartTime) / 1000);\n      const newChunkSize = this.calculateNewChunkSize(\n        duration,\n        props.currentChunkSize\n      );\n\n      if (response.size < props.uploadData.reservedFile.size) {\n        props.uploadData.startByte = response.size;\n\n        return await this.initiateUpload({\n          ...props,\n          currentChunkSize: newChunkSize,\n          shouldCheckUploadedFileSize: false,\n        });\n      }\n    } catch (error) {\n      if (props.retryCount >= constants.maxUploadRetries) throw error;\n      return await this.retryUpload(props);\n    }\n  }\n\n  private async retryUpload(props: InitiateUploadProp): Promise<void> {\n    props.retryCount++;\n    const wait = Math.min(\n      2 ** props.retryCount,\n      constants.maxDelayBetweenRetriesSec\n    );\n    await delay(wait);\n    props.uploadData.startByte = 0;\n    props.shouldCheckUploadedFileSize = true;\n    return await this.initiateUpload(props);\n  }\n\n  private async createUploadFormData(\n    uploadData: UploadData,\n    token: string\n  ): Promise<FormData> {\n    const stream = fs.createReadStream(uploadData.filePath, {\n      start: uploadData.startByte,\n      end: uploadData.endByte! - 1, // `end` is inclusive\n    });\n\n    const formData = new FormData();\n    formData.append(\"objectId\", uploadData.reservedFile.objectId);\n    formData.append(\"authToken\", token);\n    formData.append(\"f\", stream, {\n      filename: uploadData.reservedFile.name,\n      knownLength: uploadData.endByte! - uploadData.startByte,\n    });\n\n    return formData;\n  }\n\n  private calculateNewChunkSize(duration: number, currentSize: number): number {\n    const factor = constants.idealChunkUploadDuration / duration;\n    const newSize = Math.round(currentSize * factor);\n    return Math.min(newSize, constants.maxChunkSize);\n  }\n}\n\ntype UploadData = {\n  reservedFile: ReservationResponseFile;\n  filePath: string;\n  startByte: number;\n  endByte?: number;\n  formData?: FormData;\n};\n\ntype InitiateUploadProp = {\n  currentChunkSize: number;\n  shouldCheckUploadedFileSize: boolean;\n  uploadData: UploadData;\n  reservationToken: string;\n  retryCount: number;\n  pushProgress: (progress: number, startByte: number) => void;\n};\n","import archiver from \"archiver\";\nimport { createWriteStream } from \"fs\";\nimport * as fs from \"fs-extra\";\nimport * as path from \"path\";\nimport { getTmpDir } from \"../utils/tmpDir.js\";\n\nexport class ZipService {\n  private readonly tmpDir: string;\n\n  constructor(overrideTmpDir?: string) {\n    this.tmpDir = overrideTmpDir ?? getTmpDir();\n  }\n\n  /**\n   * Zips the contents of the given directory and stores the archive\n   * in the temp/teambeamjs directory with a unique name.\n   * @param dirPath Path to the directory to zip\n   * @returns The full path to the created zip file\n   */\n  async zipDirectory(dirPath: string): Promise<string> {\n    await fs.ensureDir(this.tmpDir);\n\n    const dirName = path.basename(dirPath);\n    let zipPath = path.join(this.tmpDir, `${dirName}.zip`);\n\n    // Handle filename collisions\n    let counter = 1;\n    while (await fs.pathExists(zipPath)) {\n      zipPath = path.join(this.tmpDir, `${dirName}_${counter++}.zip`);\n    }\n\n    try {\n      await this.createZip(dirPath, zipPath);\n      return zipPath;\n    } catch (error) {\n      // Clean up if creation fails\n      await fs.remove(zipPath).catch(() => {});\n      throw new Error(`Failed to create zip: ${(error as Error).message}`);\n    }\n  }\n\n  protected async createZip(sourceDir: string, outPath: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const output = createWriteStream(outPath);\n      const archive = archiver(\"zip\", { zlib: { level: 0 } }); // No compression\n\n      output.on(\"close\", () => resolve());\n      output.on(\"error\", (err) => reject(err));\n      archive.on(\"error\", (err) => reject(err));\n\n      archive.pipe(output);\n      archive.directory(sourceDir, false);\n      archive.finalize();\n    });\n  }\n}\n"],"mappings":"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","names":["Command","InvalidArgumentError","InvalidOptionArgumentError","colors","colors","axios","config","config","config","axios","resolve","config","colors","Command","colors","ora","program","Command","ora","z","s","colors","c","path","cmd","Command","colors","cliProgress","fs","path","axios","config","axios","resolve","config","Command","cliProgress","colors","Command","colors","z","colors","ora","ora","colors","config","Command","z","apiSkalioId","colors","Command","colors","cliProgress","fs","ora","path","z","axios","fs","axios","fs","createWriteStream","fs","path","resolve","createWriteStream","config","Command","fs","cliProgress","colors","ora","path","z","Command","InvalidArgumentError","InvalidOptionArgumentError","colors"]}